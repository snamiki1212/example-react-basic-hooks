{"version":3,"sources":["containers/Header.tsx","consists/index.tsx","components/Countdown.tsx","lib/time.ts","containers/Countdown.tsx","containers/Footer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","react_default","a","createElement","style","backgroundColor","height","display","justifyContent","alignItems","href","CountdownComponent","_ref","sec","leftSec","active","start","reset","stop","fontSize","moment","utc","format","Button_default","onClick","disabled","color","useCountdown","limit","_useState","useState","_useState2","Object","slicedToArray","setLeftSec","_useState3","_useState4","timerObj","setTimerObj","_useState5","_useState6","setActive","setCountdown","setInterval","prev","useEffect","alert","window","confirm","clearInterval","CountdownContainer","_useCountdown","_useCountdown2","_useCountdown2$","_useCountdown2$2","Countdown","Footer","width","position","bottom","App","className","containers_Header","containers_Countdown","containers_Footer","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a36d4372.chunk.js","sourcesContent":["import React, {FC} from 'react';\nimport {APP_NAME, REPOSITORY_URL, PRIMARY_COLOR} from '../consists';\n\nconst Header: FC = (): any => {\n  return (\n    <div\n      style={{\n        backgroundColor: PRIMARY_COLOR,\n        height: '30px',\n        display: 'flex',\n        justifyContent: 'space-around',\n        alignItems: 'center',\n      }}\n    >\n      <span>{APP_NAME}</span>\n      <a href={REPOSITORY_URL}>Github</a>\n    </div>\n  );\n};\n\nexport default Header;\n","export const APP_NAME: string = 'POMOTIMER with HOOKS';\nexport const REPOSITORY_URL: string =\n  'https://github.com/snamiki1212/pomotimer-with-hooks';\nexport const PRIMARY_COLOR: string = 'lightgray';\n","import React, {FC} from 'react';\nimport Button from '@material-ui/core/Button';\nimport {secToMMSS} from '../lib/time';\n\ninterface CountdownProps {\n  leftSec: number;\n  active: boolean;\n  start: () => any;\n  reset: () => any;\n  stop: () => any;\n}\n\nconst CountdownComponent: FC<CountdownProps> = ({\n  leftSec,\n  active,\n  start,\n  reset,\n  stop,\n}): any => {\n  return (\n    <div>\n      <time style={{fontSize: '100px'}}>{secToMMSS(leftSec)}</time>\n      <br />\n      <Button onClick={start} disabled={active} color=\"primary\">\n        START\n      </Button>\n      <Button onClick={stop} disabled={!active} color=\"primary\">\n        STOP\n      </Button>\n      <Button onClick={reset} color=\"secondary\">\n        RESET\n      </Button>\n    </div>\n  );\n};\n\nexport default CountdownComponent;\n","import moment from 'moment';\n\nexport const secToMMSS = (sec: number): string =>\n  moment.utc(sec * 1000).format('mm:ss');\n","import React, {FC, useEffect, useState} from 'react';\nimport CountdownComponent from '../components/Countdown';\n\nconst useCountdown = (limit: number): any => {\n  const [leftSec, setLeftSec]: [number, any] = useState(limit);\n  let [timerObj, setTimerObj]: any = useState('');\n  const [active, setActive]: [boolean, any] = useState(false);\n\n  const setCountdown = () => {\n    if (!active) {\n      setTimerObj(\n        setInterval(() => {\n          setLeftSec((prev: number) => prev - 1);\n        }, 1000)\n      );\n    }\n  };\n\n  const afterTimeup = (left: any): any => {\n    if (left <= 0) {\n      alert('FINISHED');\n      setLeftSec(() => limit);\n    }\n  };\n\n  const reset = () => {\n    if (window.confirm('RESET TIMER?')) {\n      setLeftSec(limit);\n    }\n  };\n\n  const stop = () => {\n    setActive(false);\n    clearInterval(timerObj);\n  };\n\n  const start = () => {\n    if (!active) {\n      clearInterval(timerObj);\n      setCountdown();\n      setActive(true);\n    }\n  };\n\n  useEffect(() => {\n    setCountdown();\n    setActive(true);\n  }, []);\n\n  useEffect(() => {\n    afterTimeup(leftSec);\n  }, [leftSec]);\n\n  return [[leftSec, active], [reset, stop, start]];\n};\n\nconst CountdownContainer: FC = () => {\n  const TIMER = 60 * 25;\n  const [[leftSec, active], [reset, stop, start]] = useCountdown(TIMER);\n\n  return (\n    <CountdownComponent\n      leftSec={leftSec}\n      active={active}\n      reset={reset}\n      stop={stop}\n      start={start}\n    />\n  );\n};\n\nexport default CountdownContainer;\n","import React, {FC} from 'react';\nimport {PRIMARY_COLOR} from '../consists';\n\nconst Footer: FC = (): any => {\n  return (\n    <div\n      style={{\n        backgroundColor: PRIMARY_COLOR,\n        width: '100%',\n        position: 'absolute',\n        bottom: 0,\n      }}\n    >\n      <span>This app is created with React and Hooks.</span>\n    </div>\n  );\n};\n\nexport default Footer;\n","import React from 'react';\nimport './App.css';\nimport Header from './containers/Header';\nimport CountdownContainer from './containers/Countdown';\nimport Footer from './containers/Footer';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <Header />\n      <CountdownContainer />\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}